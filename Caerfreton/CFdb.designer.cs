#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18046
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Caerfreton
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Caerfreton")]
	public partial class CFdbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertContactDetail(ContactDetail instance);
    partial void UpdateContactDetail(ContactDetail instance);
    partial void DeleteContactDetail(ContactDetail instance);
    partial void InsertLink_NextOfKin_Contact(Link_NextOfKin_Contact instance);
    partial void UpdateLink_NextOfKin_Contact(Link_NextOfKin_Contact instance);
    partial void DeleteLink_NextOfKin_Contact(Link_NextOfKin_Contact instance);
    partial void InsertLink_PersonalDetails_Contact(Link_PersonalDetails_Contact instance);
    partial void UpdateLink_PersonalDetails_Contact(Link_PersonalDetails_Contact instance);
    partial void DeleteLink_PersonalDetails_Contact(Link_PersonalDetails_Contact instance);
    partial void InsertLink_PersonalDetails_LocalGroup(Link_PersonalDetails_LocalGroup instance);
    partial void UpdateLink_PersonalDetails_LocalGroup(Link_PersonalDetails_LocalGroup instance);
    partial void DeleteLink_PersonalDetails_LocalGroup(Link_PersonalDetails_LocalGroup instance);
    partial void InsertLink_PersonalDetails_Reference(Link_PersonalDetails_Reference instance);
    partial void UpdateLink_PersonalDetails_Reference(Link_PersonalDetails_Reference instance);
    partial void DeleteLink_PersonalDetails_Reference(Link_PersonalDetails_Reference instance);
    partial void InsertLink_Reference_Contact(Link_Reference_Contact instance);
    partial void UpdateLink_Reference_Contact(Link_Reference_Contact instance);
    partial void DeleteLink_Reference_Contact(Link_Reference_Contact instance);
    partial void InsertLocalGroup(LocalGroup instance);
    partial void UpdateLocalGroup(LocalGroup instance);
    partial void DeleteLocalGroup(LocalGroup instance);
    partial void InsertName(Name instance);
    partial void UpdateName(Name instance);
    partial void DeleteName(Name instance);
    partial void InsertNeed(Need instance);
    partial void UpdateNeed(Need instance);
    partial void DeleteNeed(Need instance);
    partial void InsertNextOfKin(NextOfKin instance);
    partial void UpdateNextOfKin(NextOfKin instance);
    partial void DeleteNextOfKin(NextOfKin instance);
    partial void InsertPersonalDetail(PersonalDetail instance);
    partial void UpdatePersonalDetail(PersonalDetail instance);
    partial void DeletePersonalDetail(PersonalDetail instance);
    partial void InsertReference(Reference instance);
    partial void UpdateReference(Reference instance);
    partial void DeleteReference(Reference instance);
    #endregion
		
		public CFdbDataContext() : 
				base(global::Caerfreton.Properties.Settings.Default.CaerfretonConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CFdbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CFdbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CFdbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CFdbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedules
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<ContactDetail> ContactDetails
		{
			get
			{
				return this.GetTable<ContactDetail>();
			}
		}
		
		public System.Data.Linq.Table<Link_NextOfKin_Contact> Link_NextOfKin_Contacts
		{
			get
			{
				return this.GetTable<Link_NextOfKin_Contact>();
			}
		}
		
		public System.Data.Linq.Table<Link_PersonalDetails_Contact> Link_PersonalDetails_Contacts
		{
			get
			{
				return this.GetTable<Link_PersonalDetails_Contact>();
			}
		}
		
		public System.Data.Linq.Table<Link_PersonalDetails_LocalGroup> Link_PersonalDetails_LocalGroups
		{
			get
			{
				return this.GetTable<Link_PersonalDetails_LocalGroup>();
			}
		}
		
		public System.Data.Linq.Table<Link_PersonalDetails_Reference> Link_PersonalDetails_References
		{
			get
			{
				return this.GetTable<Link_PersonalDetails_Reference>();
			}
		}
		
		public System.Data.Linq.Table<Link_Reference_Contact> Link_Reference_Contacts
		{
			get
			{
				return this.GetTable<Link_Reference_Contact>();
			}
		}
		
		public System.Data.Linq.Table<LocalGroup> LocalGroups
		{
			get
			{
				return this.GetTable<LocalGroup>();
			}
		}
		
		public System.Data.Linq.Table<Name> Names
		{
			get
			{
				return this.GetTable<Name>();
			}
		}
		
		public System.Data.Linq.Table<Need> Needs
		{
			get
			{
				return this.GetTable<Need>();
			}
		}
		
		public System.Data.Linq.Table<NextOfKin> NextOfKins
		{
			get
			{
				return this.GetTable<NextOfKin>();
			}
		}
		
		public System.Data.Linq.Table<PersonalDetail> PersonalDetails
		{
			get
			{
				return this.GetTable<PersonalDetail>();
			}
		}
		
		public System.Data.Linq.Table<Reference> References
		{
			get
			{
				return this.GetTable<Reference>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _House;
		
		private string _Street;
		
		private string _District;
		
		private string _Town;
		
		private string _County;
		
		private string _PostCode;
		
		private EntitySet<NextOfKin> _NextOfKins;
		
		private EntitySet<PersonalDetail> _PersonalDetails;
		
		private EntitySet<Reference> _References;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnHouseChanging(string value);
    partial void OnHouseChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnDistrictChanging(string value);
    partial void OnDistrictChanged();
    partial void OnTownChanging(string value);
    partial void OnTownChanged();
    partial void OnCountyChanging(string value);
    partial void OnCountyChanged();
    partial void OnPostCodeChanging(string value);
    partial void OnPostCodeChanged();
    #endregion
		
		public Address()
		{
			this._NextOfKins = new EntitySet<NextOfKin>(new Action<NextOfKin>(this.attach_NextOfKins), new Action<NextOfKin>(this.detach_NextOfKins));
			this._PersonalDetails = new EntitySet<PersonalDetail>(new Action<PersonalDetail>(this.attach_PersonalDetails), new Action<PersonalDetail>(this.detach_PersonalDetails));
			this._References = new EntitySet<Reference>(new Action<Reference>(this.attach_References), new Action<Reference>(this.detach_References));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_House", DbType="NVarChar(50)")]
		public string House
		{
			get
			{
				return this._House;
			}
			set
			{
				if ((this._House != value))
				{
					this.OnHouseChanging(value);
					this.SendPropertyChanging();
					this._House = value;
					this.SendPropertyChanged("House");
					this.OnHouseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(50)")]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District", DbType="NVarChar(50)")]
		public string District
		{
			get
			{
				return this._District;
			}
			set
			{
				if ((this._District != value))
				{
					this.OnDistrictChanging(value);
					this.SendPropertyChanging();
					this._District = value;
					this.SendPropertyChanged("District");
					this.OnDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Town", DbType="NVarChar(50)")]
		public string Town
		{
			get
			{
				return this._Town;
			}
			set
			{
				if ((this._Town != value))
				{
					this.OnTownChanging(value);
					this.SendPropertyChanging();
					this._Town = value;
					this.SendPropertyChanged("Town");
					this.OnTownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_County", DbType="NVarChar(50)")]
		public string County
		{
			get
			{
				return this._County;
			}
			set
			{
				if ((this._County != value))
				{
					this.OnCountyChanging(value);
					this.SendPropertyChanging();
					this._County = value;
					this.SendPropertyChanged("County");
					this.OnCountyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostCode", DbType="NVarChar(50)")]
		public string PostCode
		{
			get
			{
				return this._PostCode;
			}
			set
			{
				if ((this._PostCode != value))
				{
					this.OnPostCodeChanging(value);
					this.SendPropertyChanging();
					this._PostCode = value;
					this.SendPropertyChanged("PostCode");
					this.OnPostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_NextOfKin", Storage="_NextOfKins", ThisKey="Id", OtherKey="AddressId")]
		public EntitySet<NextOfKin> NextOfKins
		{
			get
			{
				return this._NextOfKins;
			}
			set
			{
				this._NextOfKins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_PersonalDetail", Storage="_PersonalDetails", ThisKey="Id", OtherKey="AddressId")]
		public EntitySet<PersonalDetail> PersonalDetails
		{
			get
			{
				return this._PersonalDetails;
			}
			set
			{
				this._PersonalDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Reference", Storage="_References", ThisKey="Id", OtherKey="AddressId")]
		public EntitySet<Reference> References
		{
			get
			{
				return this._References;
			}
			set
			{
				this._References.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NextOfKins(NextOfKin entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_NextOfKins(NextOfKin entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_PersonalDetails(PersonalDetail entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_PersonalDetails(PersonalDetail entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedule")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Recurrence;
		
		private System.Nullable<bool> _Monday;
		
		private System.Nullable<bool> _Tuesday;
		
		private System.Nullable<bool> _Wednesday;
		
		private System.Nullable<bool> _Thursday;
		
		private System.Nullable<bool> _Friday;
		
		private System.Nullable<bool> _Saturday;
		
		private System.Nullable<bool> _Sunday;
		
		private System.Nullable<short> _OrdinalValue;
		
		private EntitySet<Need> _Needs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRecurrenceChanging(string value);
    partial void OnRecurrenceChanged();
    partial void OnMondayChanging(System.Nullable<bool> value);
    partial void OnMondayChanged();
    partial void OnTuesdayChanging(System.Nullable<bool> value);
    partial void OnTuesdayChanged();
    partial void OnWednesdayChanging(System.Nullable<bool> value);
    partial void OnWednesdayChanged();
    partial void OnThursdayChanging(System.Nullable<bool> value);
    partial void OnThursdayChanged();
    partial void OnFridayChanging(System.Nullable<bool> value);
    partial void OnFridayChanged();
    partial void OnSaturdayChanging(System.Nullable<bool> value);
    partial void OnSaturdayChanged();
    partial void OnSundayChanging(System.Nullable<bool> value);
    partial void OnSundayChanged();
    partial void OnOrdinalValueChanging(System.Nullable<short> value);
    partial void OnOrdinalValueChanged();
    #endregion
		
		public Schedule()
		{
			this._Needs = new EntitySet<Need>(new Action<Need>(this.attach_Needs), new Action<Need>(this.detach_Needs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recurrence", DbType="NChar(10)")]
		public string Recurrence
		{
			get
			{
				return this._Recurrence;
			}
			set
			{
				if ((this._Recurrence != value))
				{
					this.OnRecurrenceChanging(value);
					this.SendPropertyChanging();
					this._Recurrence = value;
					this.SendPropertyChanged("Recurrence");
					this.OnRecurrenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Monday", DbType="Bit")]
		public System.Nullable<bool> Monday
		{
			get
			{
				return this._Monday;
			}
			set
			{
				if ((this._Monday != value))
				{
					this.OnMondayChanging(value);
					this.SendPropertyChanging();
					this._Monday = value;
					this.SendPropertyChanged("Monday");
					this.OnMondayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tuesday", DbType="Bit")]
		public System.Nullable<bool> Tuesday
		{
			get
			{
				return this._Tuesday;
			}
			set
			{
				if ((this._Tuesday != value))
				{
					this.OnTuesdayChanging(value);
					this.SendPropertyChanging();
					this._Tuesday = value;
					this.SendPropertyChanged("Tuesday");
					this.OnTuesdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wednesday", DbType="Bit")]
		public System.Nullable<bool> Wednesday
		{
			get
			{
				return this._Wednesday;
			}
			set
			{
				if ((this._Wednesday != value))
				{
					this.OnWednesdayChanging(value);
					this.SendPropertyChanging();
					this._Wednesday = value;
					this.SendPropertyChanged("Wednesday");
					this.OnWednesdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thursday", DbType="Bit")]
		public System.Nullable<bool> Thursday
		{
			get
			{
				return this._Thursday;
			}
			set
			{
				if ((this._Thursday != value))
				{
					this.OnThursdayChanging(value);
					this.SendPropertyChanging();
					this._Thursday = value;
					this.SendPropertyChanged("Thursday");
					this.OnThursdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Friday", DbType="Bit")]
		public System.Nullable<bool> Friday
		{
			get
			{
				return this._Friday;
			}
			set
			{
				if ((this._Friday != value))
				{
					this.OnFridayChanging(value);
					this.SendPropertyChanging();
					this._Friday = value;
					this.SendPropertyChanged("Friday");
					this.OnFridayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Saturday", DbType="Bit")]
		public System.Nullable<bool> Saturday
		{
			get
			{
				return this._Saturday;
			}
			set
			{
				if ((this._Saturday != value))
				{
					this.OnSaturdayChanging(value);
					this.SendPropertyChanging();
					this._Saturday = value;
					this.SendPropertyChanged("Saturday");
					this.OnSaturdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sunday", DbType="Bit")]
		public System.Nullable<bool> Sunday
		{
			get
			{
				return this._Sunday;
			}
			set
			{
				if ((this._Sunday != value))
				{
					this.OnSundayChanging(value);
					this.SendPropertyChanging();
					this._Sunday = value;
					this.SendPropertyChanged("Sunday");
					this.OnSundayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdinalValue", DbType="SmallInt")]
		public System.Nullable<short> OrdinalValue
		{
			get
			{
				return this._OrdinalValue;
			}
			set
			{
				if ((this._OrdinalValue != value))
				{
					this.OnOrdinalValueChanging(value);
					this.SendPropertyChanging();
					this._OrdinalValue = value;
					this.SendPropertyChanged("OrdinalValue");
					this.OnOrdinalValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_Need", Storage="_Needs", ThisKey="Id", OtherKey="ScheduleId")]
		public EntitySet<Need> Needs
		{
			get
			{
				return this._Needs;
			}
			set
			{
				this._Needs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Needs(Need entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = this;
		}
		
		private void detach_Needs(Need entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactDetails")]
	public partial class ContactDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<short> _Type;
		
		private string _Detail;
		
		private EntitySet<Link_NextOfKin_Contact> _Link_NextOfKin_Contacts;
		
		private EntitySet<Link_PersonalDetails_Contact> _Link_PersonalDetails_Contacts;
		
		private EntitySet<Link_Reference_Contact> _Link_Reference_Contacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeChanging(System.Nullable<short> value);
    partial void OnTypeChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    #endregion
		
		public ContactDetail()
		{
			this._Link_NextOfKin_Contacts = new EntitySet<Link_NextOfKin_Contact>(new Action<Link_NextOfKin_Contact>(this.attach_Link_NextOfKin_Contacts), new Action<Link_NextOfKin_Contact>(this.detach_Link_NextOfKin_Contacts));
			this._Link_PersonalDetails_Contacts = new EntitySet<Link_PersonalDetails_Contact>(new Action<Link_PersonalDetails_Contact>(this.attach_Link_PersonalDetails_Contacts), new Action<Link_PersonalDetails_Contact>(this.detach_Link_PersonalDetails_Contacts));
			this._Link_Reference_Contacts = new EntitySet<Link_Reference_Contact>(new Action<Link_Reference_Contact>(this.attach_Link_Reference_Contacts), new Action<Link_Reference_Contact>(this.detach_Link_Reference_Contacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="SmallInt")]
		public System.Nullable<short> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="NVarChar(50)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactDetail_Link_NextOfKin_Contact", Storage="_Link_NextOfKin_Contacts", ThisKey="Id", OtherKey="ContactId")]
		public EntitySet<Link_NextOfKin_Contact> Link_NextOfKin_Contacts
		{
			get
			{
				return this._Link_NextOfKin_Contacts;
			}
			set
			{
				this._Link_NextOfKin_Contacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactDetail_Link_PersonalDetails_Contact", Storage="_Link_PersonalDetails_Contacts", ThisKey="Id", OtherKey="ContactId")]
		public EntitySet<Link_PersonalDetails_Contact> Link_PersonalDetails_Contacts
		{
			get
			{
				return this._Link_PersonalDetails_Contacts;
			}
			set
			{
				this._Link_PersonalDetails_Contacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactDetail_Link_Reference_Contact", Storage="_Link_Reference_Contacts", ThisKey="Id", OtherKey="ContactId")]
		public EntitySet<Link_Reference_Contact> Link_Reference_Contacts
		{
			get
			{
				return this._Link_Reference_Contacts;
			}
			set
			{
				this._Link_Reference_Contacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Link_NextOfKin_Contacts(Link_NextOfKin_Contact entity)
		{
			this.SendPropertyChanging();
			entity.ContactDetail = this;
		}
		
		private void detach_Link_NextOfKin_Contacts(Link_NextOfKin_Contact entity)
		{
			this.SendPropertyChanging();
			entity.ContactDetail = null;
		}
		
		private void attach_Link_PersonalDetails_Contacts(Link_PersonalDetails_Contact entity)
		{
			this.SendPropertyChanging();
			entity.ContactDetail = this;
		}
		
		private void detach_Link_PersonalDetails_Contacts(Link_PersonalDetails_Contact entity)
		{
			this.SendPropertyChanging();
			entity.ContactDetail = null;
		}
		
		private void attach_Link_Reference_Contacts(Link_Reference_Contact entity)
		{
			this.SendPropertyChanging();
			entity.ContactDetail = this;
		}
		
		private void detach_Link_Reference_Contacts(Link_Reference_Contact entity)
		{
			this.SendPropertyChanging();
			entity.ContactDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Link_NextOfKin_Contacts")]
	public partial class Link_NextOfKin_Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _NextOfKinId;
		
		private int _ContactId;
		
		private EntityRef<ContactDetail> _ContactDetail;
		
		private EntityRef<NextOfKin> _NextOfKin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNextOfKinIdChanging(int value);
    partial void OnNextOfKinIdChanged();
    partial void OnContactIdChanging(int value);
    partial void OnContactIdChanged();
    #endregion
		
		public Link_NextOfKin_Contact()
		{
			this._ContactDetail = default(EntityRef<ContactDetail>);
			this._NextOfKin = default(EntityRef<NextOfKin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextOfKinId", DbType="Int NOT NULL")]
		public int NextOfKinId
		{
			get
			{
				return this._NextOfKinId;
			}
			set
			{
				if ((this._NextOfKinId != value))
				{
					if (this._NextOfKin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNextOfKinIdChanging(value);
					this.SendPropertyChanging();
					this._NextOfKinId = value;
					this.SendPropertyChanged("NextOfKinId");
					this.OnNextOfKinIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="Int NOT NULL")]
		public int ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._ContactDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactDetail_Link_NextOfKin_Contact", Storage="_ContactDetail", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true)]
		public ContactDetail ContactDetail
		{
			get
			{
				return this._ContactDetail.Entity;
			}
			set
			{
				ContactDetail previousValue = this._ContactDetail.Entity;
				if (((previousValue != value) 
							|| (this._ContactDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactDetail.Entity = null;
						previousValue.Link_NextOfKin_Contacts.Remove(this);
					}
					this._ContactDetail.Entity = value;
					if ((value != null))
					{
						value.Link_NextOfKin_Contacts.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(int);
					}
					this.SendPropertyChanged("ContactDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NextOfKin_Link_NextOfKin_Contact", Storage="_NextOfKin", ThisKey="NextOfKinId", OtherKey="Id", IsForeignKey=true)]
		public NextOfKin NextOfKin
		{
			get
			{
				return this._NextOfKin.Entity;
			}
			set
			{
				NextOfKin previousValue = this._NextOfKin.Entity;
				if (((previousValue != value) 
							|| (this._NextOfKin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NextOfKin.Entity = null;
						previousValue.Link_NextOfKin_Contacts.Remove(this);
					}
					this._NextOfKin.Entity = value;
					if ((value != null))
					{
						value.Link_NextOfKin_Contacts.Add(this);
						this._NextOfKinId = value.Id;
					}
					else
					{
						this._NextOfKinId = default(int);
					}
					this.SendPropertyChanged("NextOfKin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Link_PersonalDetails_Contacts")]
	public partial class Link_PersonalDetails_Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PersonalDetailsId;
		
		private int _ContactId;
		
		private EntityRef<ContactDetail> _ContactDetail;
		
		private EntityRef<PersonalDetail> _PersonalDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPersonalDetailsIdChanging(int value);
    partial void OnPersonalDetailsIdChanged();
    partial void OnContactIdChanging(int value);
    partial void OnContactIdChanged();
    #endregion
		
		public Link_PersonalDetails_Contact()
		{
			this._ContactDetail = default(EntityRef<ContactDetail>);
			this._PersonalDetail = default(EntityRef<PersonalDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalDetailsId", DbType="Int NOT NULL")]
		public int PersonalDetailsId
		{
			get
			{
				return this._PersonalDetailsId;
			}
			set
			{
				if ((this._PersonalDetailsId != value))
				{
					if (this._PersonalDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonalDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._PersonalDetailsId = value;
					this.SendPropertyChanged("PersonalDetailsId");
					this.OnPersonalDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="Int NOT NULL")]
		public int ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._ContactDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactDetail_Link_PersonalDetails_Contact", Storage="_ContactDetail", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true)]
		public ContactDetail ContactDetail
		{
			get
			{
				return this._ContactDetail.Entity;
			}
			set
			{
				ContactDetail previousValue = this._ContactDetail.Entity;
				if (((previousValue != value) 
							|| (this._ContactDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactDetail.Entity = null;
						previousValue.Link_PersonalDetails_Contacts.Remove(this);
					}
					this._ContactDetail.Entity = value;
					if ((value != null))
					{
						value.Link_PersonalDetails_Contacts.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(int);
					}
					this.SendPropertyChanged("ContactDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalDetail_Link_PersonalDetails_Contact", Storage="_PersonalDetail", ThisKey="PersonalDetailsId", OtherKey="Id", IsForeignKey=true)]
		public PersonalDetail PersonalDetail
		{
			get
			{
				return this._PersonalDetail.Entity;
			}
			set
			{
				PersonalDetail previousValue = this._PersonalDetail.Entity;
				if (((previousValue != value) 
							|| (this._PersonalDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonalDetail.Entity = null;
						previousValue.Link_PersonalDetails_Contacts.Remove(this);
					}
					this._PersonalDetail.Entity = value;
					if ((value != null))
					{
						value.Link_PersonalDetails_Contacts.Add(this);
						this._PersonalDetailsId = value.Id;
					}
					else
					{
						this._PersonalDetailsId = default(int);
					}
					this.SendPropertyChanged("PersonalDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Link_PersonalDetails_LocalGroup")]
	public partial class Link_PersonalDetails_LocalGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PersonalDetailsId;
		
		private int _LocalGroupid;
		
		private System.Nullable<bool> _isManager;
		
		private EntityRef<LocalGroup> _LocalGroup;
		
		private EntityRef<PersonalDetail> _PersonalDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPersonalDetailsIdChanging(int value);
    partial void OnPersonalDetailsIdChanged();
    partial void OnLocalGroupidChanging(int value);
    partial void OnLocalGroupidChanged();
    partial void OnisManagerChanging(System.Nullable<bool> value);
    partial void OnisManagerChanged();
    #endregion
		
		public Link_PersonalDetails_LocalGroup()
		{
			this._LocalGroup = default(EntityRef<LocalGroup>);
			this._PersonalDetail = default(EntityRef<PersonalDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalDetailsId", DbType="Int NOT NULL")]
		public int PersonalDetailsId
		{
			get
			{
				return this._PersonalDetailsId;
			}
			set
			{
				if ((this._PersonalDetailsId != value))
				{
					if (this._PersonalDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonalDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._PersonalDetailsId = value;
					this.SendPropertyChanged("PersonalDetailsId");
					this.OnPersonalDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalGroupid", DbType="Int NOT NULL")]
		public int LocalGroupid
		{
			get
			{
				return this._LocalGroupid;
			}
			set
			{
				if ((this._LocalGroupid != value))
				{
					if (this._LocalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocalGroupidChanging(value);
					this.SendPropertyChanging();
					this._LocalGroupid = value;
					this.SendPropertyChanged("LocalGroupid");
					this.OnLocalGroupidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isManager", DbType="Bit")]
		public System.Nullable<bool> isManager
		{
			get
			{
				return this._isManager;
			}
			set
			{
				if ((this._isManager != value))
				{
					this.OnisManagerChanging(value);
					this.SendPropertyChanging();
					this._isManager = value;
					this.SendPropertyChanged("isManager");
					this.OnisManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocalGroup_Link_PersonalDetails_LocalGroup", Storage="_LocalGroup", ThisKey="LocalGroupid", OtherKey="Id", IsForeignKey=true)]
		public LocalGroup LocalGroup
		{
			get
			{
				return this._LocalGroup.Entity;
			}
			set
			{
				LocalGroup previousValue = this._LocalGroup.Entity;
				if (((previousValue != value) 
							|| (this._LocalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LocalGroup.Entity = null;
						previousValue.Link_PersonalDetails_LocalGroups.Remove(this);
					}
					this._LocalGroup.Entity = value;
					if ((value != null))
					{
						value.Link_PersonalDetails_LocalGroups.Add(this);
						this._LocalGroupid = value.Id;
					}
					else
					{
						this._LocalGroupid = default(int);
					}
					this.SendPropertyChanged("LocalGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalDetail_Link_PersonalDetails_LocalGroup", Storage="_PersonalDetail", ThisKey="PersonalDetailsId", OtherKey="Id", IsForeignKey=true)]
		public PersonalDetail PersonalDetail
		{
			get
			{
				return this._PersonalDetail.Entity;
			}
			set
			{
				PersonalDetail previousValue = this._PersonalDetail.Entity;
				if (((previousValue != value) 
							|| (this._PersonalDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonalDetail.Entity = null;
						previousValue.Link_PersonalDetails_LocalGroups.Remove(this);
					}
					this._PersonalDetail.Entity = value;
					if ((value != null))
					{
						value.Link_PersonalDetails_LocalGroups.Add(this);
						this._PersonalDetailsId = value.Id;
					}
					else
					{
						this._PersonalDetailsId = default(int);
					}
					this.SendPropertyChanged("PersonalDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Link_PersonalDetails_Reference")]
	public partial class Link_PersonalDetails_Reference : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PersonalDetailsId;
		
		private int _ReferenceId;
		
		private EntityRef<PersonalDetail> _PersonalDetail;
		
		private EntityRef<Reference> _Reference;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPersonalDetailsIdChanging(int value);
    partial void OnPersonalDetailsIdChanged();
    partial void OnReferenceIdChanging(int value);
    partial void OnReferenceIdChanged();
    #endregion
		
		public Link_PersonalDetails_Reference()
		{
			this._PersonalDetail = default(EntityRef<PersonalDetail>);
			this._Reference = default(EntityRef<Reference>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalDetailsId", DbType="Int NOT NULL")]
		public int PersonalDetailsId
		{
			get
			{
				return this._PersonalDetailsId;
			}
			set
			{
				if ((this._PersonalDetailsId != value))
				{
					if (this._PersonalDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonalDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._PersonalDetailsId = value;
					this.SendPropertyChanged("PersonalDetailsId");
					this.OnPersonalDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceId", DbType="Int NOT NULL")]
		public int ReferenceId
		{
			get
			{
				return this._ReferenceId;
			}
			set
			{
				if ((this._ReferenceId != value))
				{
					if (this._Reference.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferenceIdChanging(value);
					this.SendPropertyChanging();
					this._ReferenceId = value;
					this.SendPropertyChanged("ReferenceId");
					this.OnReferenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalDetail_Link_PersonalDetails_Reference", Storage="_PersonalDetail", ThisKey="PersonalDetailsId", OtherKey="Id", IsForeignKey=true)]
		public PersonalDetail PersonalDetail
		{
			get
			{
				return this._PersonalDetail.Entity;
			}
			set
			{
				PersonalDetail previousValue = this._PersonalDetail.Entity;
				if (((previousValue != value) 
							|| (this._PersonalDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonalDetail.Entity = null;
						previousValue.Link_PersonalDetails_References.Remove(this);
					}
					this._PersonalDetail.Entity = value;
					if ((value != null))
					{
						value.Link_PersonalDetails_References.Add(this);
						this._PersonalDetailsId = value.Id;
					}
					else
					{
						this._PersonalDetailsId = default(int);
					}
					this.SendPropertyChanged("PersonalDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reference_Link_PersonalDetails_Reference", Storage="_Reference", ThisKey="ReferenceId", OtherKey="Id", IsForeignKey=true)]
		public Reference Reference
		{
			get
			{
				return this._Reference.Entity;
			}
			set
			{
				Reference previousValue = this._Reference.Entity;
				if (((previousValue != value) 
							|| (this._Reference.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reference.Entity = null;
						previousValue.Link_PersonalDetails_References.Remove(this);
					}
					this._Reference.Entity = value;
					if ((value != null))
					{
						value.Link_PersonalDetails_References.Add(this);
						this._ReferenceId = value.Id;
					}
					else
					{
						this._ReferenceId = default(int);
					}
					this.SendPropertyChanged("Reference");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Link_Reference_Contacts")]
	public partial class Link_Reference_Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ReferenceId;
		
		private int _ContactId;
		
		private EntityRef<ContactDetail> _ContactDetail;
		
		private EntityRef<Reference> _Reference;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnReferenceIdChanging(int value);
    partial void OnReferenceIdChanged();
    partial void OnContactIdChanging(int value);
    partial void OnContactIdChanged();
    #endregion
		
		public Link_Reference_Contact()
		{
			this._ContactDetail = default(EntityRef<ContactDetail>);
			this._Reference = default(EntityRef<Reference>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceId", DbType="Int NOT NULL")]
		public int ReferenceId
		{
			get
			{
				return this._ReferenceId;
			}
			set
			{
				if ((this._ReferenceId != value))
				{
					if (this._Reference.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReferenceIdChanging(value);
					this.SendPropertyChanging();
					this._ReferenceId = value;
					this.SendPropertyChanged("ReferenceId");
					this.OnReferenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="Int NOT NULL")]
		public int ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._ContactDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactDetail_Link_Reference_Contact", Storage="_ContactDetail", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true)]
		public ContactDetail ContactDetail
		{
			get
			{
				return this._ContactDetail.Entity;
			}
			set
			{
				ContactDetail previousValue = this._ContactDetail.Entity;
				if (((previousValue != value) 
							|| (this._ContactDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactDetail.Entity = null;
						previousValue.Link_Reference_Contacts.Remove(this);
					}
					this._ContactDetail.Entity = value;
					if ((value != null))
					{
						value.Link_Reference_Contacts.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(int);
					}
					this.SendPropertyChanged("ContactDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reference_Link_Reference_Contact", Storage="_Reference", ThisKey="ReferenceId", OtherKey="Id", IsForeignKey=true)]
		public Reference Reference
		{
			get
			{
				return this._Reference.Entity;
			}
			set
			{
				Reference previousValue = this._Reference.Entity;
				if (((previousValue != value) 
							|| (this._Reference.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reference.Entity = null;
						previousValue.Link_Reference_Contacts.Remove(this);
					}
					this._Reference.Entity = value;
					if ((value != null))
					{
						value.Link_Reference_Contacts.Add(this);
						this._ReferenceId = value.Id;
					}
					else
					{
						this._ReferenceId = default(int);
					}
					this.SendPropertyChanged("Reference");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocalGroup")]
	public partial class LocalGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Link_PersonalDetails_LocalGroup> _Link_PersonalDetails_LocalGroups;
		
		private EntitySet<PersonalDetail> _PersonalDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public LocalGroup()
		{
			this._Link_PersonalDetails_LocalGroups = new EntitySet<Link_PersonalDetails_LocalGroup>(new Action<Link_PersonalDetails_LocalGroup>(this.attach_Link_PersonalDetails_LocalGroups), new Action<Link_PersonalDetails_LocalGroup>(this.detach_Link_PersonalDetails_LocalGroups));
			this._PersonalDetails = new EntitySet<PersonalDetail>(new Action<PersonalDetail>(this.attach_PersonalDetails), new Action<PersonalDetail>(this.detach_PersonalDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocalGroup_Link_PersonalDetails_LocalGroup", Storage="_Link_PersonalDetails_LocalGroups", ThisKey="Id", OtherKey="LocalGroupid")]
		public EntitySet<Link_PersonalDetails_LocalGroup> Link_PersonalDetails_LocalGroups
		{
			get
			{
				return this._Link_PersonalDetails_LocalGroups;
			}
			set
			{
				this._Link_PersonalDetails_LocalGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocalGroup_PersonalDetail", Storage="_PersonalDetails", ThisKey="Id", OtherKey="LocalGroupId")]
		public EntitySet<PersonalDetail> PersonalDetails
		{
			get
			{
				return this._PersonalDetails;
			}
			set
			{
				this._PersonalDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Link_PersonalDetails_LocalGroups(Link_PersonalDetails_LocalGroup entity)
		{
			this.SendPropertyChanging();
			entity.LocalGroup = this;
		}
		
		private void detach_Link_PersonalDetails_LocalGroups(Link_PersonalDetails_LocalGroup entity)
		{
			this.SendPropertyChanging();
			entity.LocalGroup = null;
		}
		
		private void attach_PersonalDetails(PersonalDetail entity)
		{
			this.SendPropertyChanging();
			entity.LocalGroup = this;
		}
		
		private void detach_PersonalDetails(PersonalDetail entity)
		{
			this.SendPropertyChanging();
			entity.LocalGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Name")]
	public partial class Name : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Forename;
		
		private string _Middle;
		
		private string _Surname;
		
		private EntitySet<NextOfKin> _NextOfKins;
		
		private EntitySet<PersonalDetail> _PersonalDetails;
		
		private EntitySet<Reference> _References;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnForenameChanging(string value);
    partial void OnForenameChanged();
    partial void OnMiddleChanging(string value);
    partial void OnMiddleChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    #endregion
		
		public Name()
		{
			this._NextOfKins = new EntitySet<NextOfKin>(new Action<NextOfKin>(this.attach_NextOfKins), new Action<NextOfKin>(this.detach_NextOfKins));
			this._PersonalDetails = new EntitySet<PersonalDetail>(new Action<PersonalDetail>(this.attach_PersonalDetails), new Action<PersonalDetail>(this.detach_PersonalDetails));
			this._References = new EntitySet<Reference>(new Action<Reference>(this.attach_References), new Action<Reference>(this.detach_References));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NChar(10)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Forename", DbType="NVarChar(50)")]
		public string Forename
		{
			get
			{
				return this._Forename;
			}
			set
			{
				if ((this._Forename != value))
				{
					this.OnForenameChanging(value);
					this.SendPropertyChanging();
					this._Forename = value;
					this.SendPropertyChanged("Forename");
					this.OnForenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Middle", DbType="NVarChar(50)")]
		public string Middle
		{
			get
			{
				return this._Middle;
			}
			set
			{
				if ((this._Middle != value))
				{
					this.OnMiddleChanging(value);
					this.SendPropertyChanging();
					this._Middle = value;
					this.SendPropertyChanged("Middle");
					this.OnMiddleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Name_NextOfKin", Storage="_NextOfKins", ThisKey="Id", OtherKey="NameId")]
		public EntitySet<NextOfKin> NextOfKins
		{
			get
			{
				return this._NextOfKins;
			}
			set
			{
				this._NextOfKins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Name_PersonalDetail", Storage="_PersonalDetails", ThisKey="Id", OtherKey="NameId")]
		public EntitySet<PersonalDetail> PersonalDetails
		{
			get
			{
				return this._PersonalDetails;
			}
			set
			{
				this._PersonalDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Name_Reference", Storage="_References", ThisKey="Id", OtherKey="NameId")]
		public EntitySet<Reference> References
		{
			get
			{
				return this._References;
			}
			set
			{
				this._References.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NextOfKins(NextOfKin entity)
		{
			this.SendPropertyChanging();
			entity.Name = this;
		}
		
		private void detach_NextOfKins(NextOfKin entity)
		{
			this.SendPropertyChanging();
			entity.Name = null;
		}
		
		private void attach_PersonalDetails(PersonalDetail entity)
		{
			this.SendPropertyChanging();
			entity.Name = this;
		}
		
		private void detach_PersonalDetails(PersonalDetail entity)
		{
			this.SendPropertyChanging();
			entity.Name = null;
		}
		
		private void attach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.Name = this;
		}
		
		private void detach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.Name = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Needs")]
	public partial class Need : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PersonalDetailsId;
		
		private int _ScheduleId;
		
		private string _ShortDescription;
		
		private string _LongDescription;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<short> _Type;
		
		private EntityRef<Schedule> _Schedule;
		
		private EntityRef<PersonalDetail> _PersonalDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPersonalDetailsIdChanging(int value);
    partial void OnPersonalDetailsIdChanged();
    partial void OnScheduleIdChanging(int value);
    partial void OnScheduleIdChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    partial void OnLongDescriptionChanging(string value);
    partial void OnLongDescriptionChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnTypeChanging(System.Nullable<short> value);
    partial void OnTypeChanged();
    #endregion
		
		public Need()
		{
			this._Schedule = default(EntityRef<Schedule>);
			this._PersonalDetail = default(EntityRef<PersonalDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalDetailsId", DbType="Int NOT NULL")]
		public int PersonalDetailsId
		{
			get
			{
				return this._PersonalDetailsId;
			}
			set
			{
				if ((this._PersonalDetailsId != value))
				{
					if (this._PersonalDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonalDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._PersonalDetailsId = value;
					this.SendPropertyChanged("PersonalDetailsId");
					this.OnPersonalDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleId", DbType="Int NOT NULL")]
		public int ScheduleId
		{
			get
			{
				return this._ScheduleId;
			}
			set
			{
				if ((this._ScheduleId != value))
				{
					if (this._Schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleIdChanging(value);
					this.SendPropertyChanging();
					this._ScheduleId = value;
					this.SendPropertyChanged("ScheduleId");
					this.OnScheduleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortDescription", DbType="NVarChar(50)")]
		public string ShortDescription
		{
			get
			{
				return this._ShortDescription;
			}
			set
			{
				if ((this._ShortDescription != value))
				{
					this.OnShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShortDescription = value;
					this.SendPropertyChanged("ShortDescription");
					this.OnShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongDescription", DbType="NVarChar(MAX)")]
		public string LongDescription
		{
			get
			{
				return this._LongDescription;
			}
			set
			{
				if ((this._LongDescription != value))
				{
					this.OnLongDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LongDescription = value;
					this.SendPropertyChanged("LongDescription");
					this.OnLongDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="SmallInt")]
		public System.Nullable<short> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_Need", Storage="_Schedule", ThisKey="ScheduleId", OtherKey="Id", IsForeignKey=true)]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.Needs.Remove(this);
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.Needs.Add(this);
						this._ScheduleId = value.Id;
					}
					else
					{
						this._ScheduleId = default(int);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalDetail_Need", Storage="_PersonalDetail", ThisKey="PersonalDetailsId", OtherKey="Id", IsForeignKey=true)]
		public PersonalDetail PersonalDetail
		{
			get
			{
				return this._PersonalDetail.Entity;
			}
			set
			{
				PersonalDetail previousValue = this._PersonalDetail.Entity;
				if (((previousValue != value) 
							|| (this._PersonalDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonalDetail.Entity = null;
						previousValue.Needs.Remove(this);
					}
					this._PersonalDetail.Entity = value;
					if ((value != null))
					{
						value.Needs.Add(this);
						this._PersonalDetailsId = value.Id;
					}
					else
					{
						this._PersonalDetailsId = default(int);
					}
					this.SendPropertyChanged("PersonalDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NextOfKin")]
	public partial class NextOfKin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _NameId;
		
		private int _AddressId;
		
		private string _Relationship;
		
		private EntitySet<Link_NextOfKin_Contact> _Link_NextOfKin_Contacts;
		
		private EntitySet<PersonalDetail> _PersonalDetails;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Name> _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameIdChanging(int value);
    partial void OnNameIdChanged();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnRelationshipChanging(string value);
    partial void OnRelationshipChanged();
    #endregion
		
		public NextOfKin()
		{
			this._Link_NextOfKin_Contacts = new EntitySet<Link_NextOfKin_Contact>(new Action<Link_NextOfKin_Contact>(this.attach_Link_NextOfKin_Contacts), new Action<Link_NextOfKin_Contact>(this.detach_Link_NextOfKin_Contacts));
			this._PersonalDetails = new EntitySet<PersonalDetail>(new Action<PersonalDetail>(this.attach_PersonalDetails), new Action<PersonalDetail>(this.detach_PersonalDetails));
			this._Address = default(EntityRef<Address>);
			this._Name = default(EntityRef<Name>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameId", DbType="Int NOT NULL")]
		public int NameId
		{
			get
			{
				return this._NameId;
			}
			set
			{
				if ((this._NameId != value))
				{
					if (this._Name.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNameIdChanging(value);
					this.SendPropertyChanging();
					this._NameId = value;
					this.SendPropertyChanged("NameId");
					this.OnNameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int NOT NULL")]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Relationship", DbType="NVarChar(50)")]
		public string Relationship
		{
			get
			{
				return this._Relationship;
			}
			set
			{
				if ((this._Relationship != value))
				{
					this.OnRelationshipChanging(value);
					this.SendPropertyChanging();
					this._Relationship = value;
					this.SendPropertyChanged("Relationship");
					this.OnRelationshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NextOfKin_Link_NextOfKin_Contact", Storage="_Link_NextOfKin_Contacts", ThisKey="Id", OtherKey="NextOfKinId")]
		public EntitySet<Link_NextOfKin_Contact> Link_NextOfKin_Contacts
		{
			get
			{
				return this._Link_NextOfKin_Contacts;
			}
			set
			{
				this._Link_NextOfKin_Contacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NextOfKin_PersonalDetail", Storage="_PersonalDetails", ThisKey="Id", OtherKey="NextOfKinId")]
		public EntitySet<PersonalDetail> PersonalDetails
		{
			get
			{
				return this._PersonalDetails;
			}
			set
			{
				this._PersonalDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_NextOfKin", Storage="_Address", ThisKey="AddressId", OtherKey="Id", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.NextOfKins.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.NextOfKins.Add(this);
						this._AddressId = value.Id;
					}
					else
					{
						this._AddressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Name_NextOfKin", Storage="_Name", ThisKey="NameId", OtherKey="Id", IsForeignKey=true)]
		public Name Name
		{
			get
			{
				return this._Name.Entity;
			}
			set
			{
				Name previousValue = this._Name.Entity;
				if (((previousValue != value) 
							|| (this._Name.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Name.Entity = null;
						previousValue.NextOfKins.Remove(this);
					}
					this._Name.Entity = value;
					if ((value != null))
					{
						value.NextOfKins.Add(this);
						this._NameId = value.Id;
					}
					else
					{
						this._NameId = default(int);
					}
					this.SendPropertyChanged("Name");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Link_NextOfKin_Contacts(Link_NextOfKin_Contact entity)
		{
			this.SendPropertyChanging();
			entity.NextOfKin = this;
		}
		
		private void detach_Link_NextOfKin_Contacts(Link_NextOfKin_Contact entity)
		{
			this.SendPropertyChanging();
			entity.NextOfKin = null;
		}
		
		private void attach_PersonalDetails(PersonalDetail entity)
		{
			this.SendPropertyChanging();
			entity.NextOfKin = this;
		}
		
		private void detach_PersonalDetails(PersonalDetail entity)
		{
			this.SendPropertyChanging();
			entity.NextOfKin = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonalDetails")]
	public partial class PersonalDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<char> _Gender;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _UserName;
		
		private string _Password;
		
		private string _MothersMaidenName;
		
		private string _BankCardNumber;
		
		private string _CVV2;
		
		private System.Nullable<System.DateTime> _ExpiryDate;
		
		private string _Occupation;
		
		private string _BloodType;
		
		private System.Nullable<float> _Weight_kgs_;
		
		private System.Nullable<float> _Height_m_;
		
		private System.Nullable<System.DateTime> _DateJoined;
		
		private System.Nullable<System.DateTime> _DateAccepted;
		
		private System.Nullable<System.DateTime> _DateLeft;
		
		private string _MemberNumber;
		
		private string _CUHoursAccount;
		
		private string _CUMoneyAccount;
		
		private string _Notes;
		
		private int _AddressId;
		
		private int _NameId;
		
		private string _NINumber;
		
		private System.Nullable<int> _NextOfKinId;
		
		private System.Nullable<int> _LocalGroupId;
		
		private EntitySet<Link_PersonalDetails_Contact> _Link_PersonalDetails_Contacts;
		
		private EntitySet<Link_PersonalDetails_LocalGroup> _Link_PersonalDetails_LocalGroups;
		
		private EntitySet<Link_PersonalDetails_Reference> _Link_PersonalDetails_References;
		
		private EntitySet<Need> _Needs;
		
		private EntitySet<Reference> _References;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Name> _Name;
		
		private EntityRef<LocalGroup> _LocalGroup;
		
		private EntityRef<NextOfKin> _NextOfKin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGenderChanging(System.Nullable<char> value);
    partial void OnGenderChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnMothersMaidenNameChanging(string value);
    partial void OnMothersMaidenNameChanged();
    partial void OnBankCardNumberChanging(string value);
    partial void OnBankCardNumberChanged();
    partial void OnCVV2Changing(string value);
    partial void OnCVV2Changed();
    partial void OnExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiryDateChanged();
    partial void OnOccupationChanging(string value);
    partial void OnOccupationChanged();
    partial void OnBloodTypeChanging(string value);
    partial void OnBloodTypeChanged();
    partial void OnWeight_kgs_Changing(System.Nullable<float> value);
    partial void OnWeight_kgs_Changed();
    partial void OnHeight_m_Changing(System.Nullable<float> value);
    partial void OnHeight_m_Changed();
    partial void OnDateJoinedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateJoinedChanged();
    partial void OnDateAcceptedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAcceptedChanged();
    partial void OnDateLeftChanging(System.Nullable<System.DateTime> value);
    partial void OnDateLeftChanged();
    partial void OnMemberNumberChanging(string value);
    partial void OnMemberNumberChanged();
    partial void OnCUHoursAccountChanging(string value);
    partial void OnCUHoursAccountChanged();
    partial void OnCUMoneyAccountChanging(string value);
    partial void OnCUMoneyAccountChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnNameIdChanging(int value);
    partial void OnNameIdChanged();
    partial void OnNINumberChanging(string value);
    partial void OnNINumberChanged();
    partial void OnNextOfKinIdChanging(System.Nullable<int> value);
    partial void OnNextOfKinIdChanged();
    partial void OnLocalGroupIdChanging(System.Nullable<int> value);
    partial void OnLocalGroupIdChanged();
    #endregion
		
		public PersonalDetail()
		{
			this._Link_PersonalDetails_Contacts = new EntitySet<Link_PersonalDetails_Contact>(new Action<Link_PersonalDetails_Contact>(this.attach_Link_PersonalDetails_Contacts), new Action<Link_PersonalDetails_Contact>(this.detach_Link_PersonalDetails_Contacts));
			this._Link_PersonalDetails_LocalGroups = new EntitySet<Link_PersonalDetails_LocalGroup>(new Action<Link_PersonalDetails_LocalGroup>(this.attach_Link_PersonalDetails_LocalGroups), new Action<Link_PersonalDetails_LocalGroup>(this.detach_Link_PersonalDetails_LocalGroups));
			this._Link_PersonalDetails_References = new EntitySet<Link_PersonalDetails_Reference>(new Action<Link_PersonalDetails_Reference>(this.attach_Link_PersonalDetails_References), new Action<Link_PersonalDetails_Reference>(this.detach_Link_PersonalDetails_References));
			this._Needs = new EntitySet<Need>(new Action<Need>(this.attach_Needs), new Action<Need>(this.detach_Needs));
			this._References = new EntitySet<Reference>(new Action<Reference>(this.attach_References), new Action<Reference>(this.detach_References));
			this._Address = default(EntityRef<Address>);
			this._Name = default(EntityRef<Name>);
			this._LocalGroup = default(EntityRef<LocalGroup>);
			this._NextOfKin = default(EntityRef<NextOfKin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NChar(1)")]
		public System.Nullable<char> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NChar(20)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MothersMaidenName", DbType="NVarChar(50)")]
		public string MothersMaidenName
		{
			get
			{
				return this._MothersMaidenName;
			}
			set
			{
				if ((this._MothersMaidenName != value))
				{
					this.OnMothersMaidenNameChanging(value);
					this.SendPropertyChanging();
					this._MothersMaidenName = value;
					this.SendPropertyChanged("MothersMaidenName");
					this.OnMothersMaidenNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankCardNumber", DbType="NChar(16)")]
		public string BankCardNumber
		{
			get
			{
				return this._BankCardNumber;
			}
			set
			{
				if ((this._BankCardNumber != value))
				{
					this.OnBankCardNumberChanging(value);
					this.SendPropertyChanging();
					this._BankCardNumber = value;
					this.SendPropertyChanged("BankCardNumber");
					this.OnBankCardNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CVV2", DbType="NChar(3)")]
		public string CVV2
		{
			get
			{
				return this._CVV2;
			}
			set
			{
				if ((this._CVV2 != value))
				{
					this.OnCVV2Changing(value);
					this.SendPropertyChanging();
					this._CVV2 = value;
					this.SendPropertyChanged("CVV2");
					this.OnCVV2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiryDate", DbType="Date")]
		public System.Nullable<System.DateTime> ExpiryDate
		{
			get
			{
				return this._ExpiryDate;
			}
			set
			{
				if ((this._ExpiryDate != value))
				{
					this.OnExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiryDate = value;
					this.SendPropertyChanged("ExpiryDate");
					this.OnExpiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Occupation", DbType="NVarChar(150)")]
		public string Occupation
		{
			get
			{
				return this._Occupation;
			}
			set
			{
				if ((this._Occupation != value))
				{
					this.OnOccupationChanging(value);
					this.SendPropertyChanging();
					this._Occupation = value;
					this.SendPropertyChanged("Occupation");
					this.OnOccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BloodType", DbType="NChar(10)")]
		public string BloodType
		{
			get
			{
				return this._BloodType;
			}
			set
			{
				if ((this._BloodType != value))
				{
					this.OnBloodTypeChanging(value);
					this.SendPropertyChanging();
					this._BloodType = value;
					this.SendPropertyChanged("BloodType");
					this.OnBloodTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Weight(kgs)]", Storage="_Weight_kgs_", DbType="Real")]
		public System.Nullable<float> Weight_kgs_
		{
			get
			{
				return this._Weight_kgs_;
			}
			set
			{
				if ((this._Weight_kgs_ != value))
				{
					this.OnWeight_kgs_Changing(value);
					this.SendPropertyChanging();
					this._Weight_kgs_ = value;
					this.SendPropertyChanged("Weight_kgs_");
					this.OnWeight_kgs_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Height(m)]", Storage="_Height_m_", DbType="Real")]
		public System.Nullable<float> Height_m_
		{
			get
			{
				return this._Height_m_;
			}
			set
			{
				if ((this._Height_m_ != value))
				{
					this.OnHeight_m_Changing(value);
					this.SendPropertyChanging();
					this._Height_m_ = value;
					this.SendPropertyChanged("Height_m_");
					this.OnHeight_m_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateJoined", DbType="Date")]
		public System.Nullable<System.DateTime> DateJoined
		{
			get
			{
				return this._DateJoined;
			}
			set
			{
				if ((this._DateJoined != value))
				{
					this.OnDateJoinedChanging(value);
					this.SendPropertyChanging();
					this._DateJoined = value;
					this.SendPropertyChanged("DateJoined");
					this.OnDateJoinedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAccepted", DbType="Date")]
		public System.Nullable<System.DateTime> DateAccepted
		{
			get
			{
				return this._DateAccepted;
			}
			set
			{
				if ((this._DateAccepted != value))
				{
					this.OnDateAcceptedChanging(value);
					this.SendPropertyChanging();
					this._DateAccepted = value;
					this.SendPropertyChanged("DateAccepted");
					this.OnDateAcceptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateLeft", DbType="Date")]
		public System.Nullable<System.DateTime> DateLeft
		{
			get
			{
				return this._DateLeft;
			}
			set
			{
				if ((this._DateLeft != value))
				{
					this.OnDateLeftChanging(value);
					this.SendPropertyChanging();
					this._DateLeft = value;
					this.SendPropertyChanged("DateLeft");
					this.OnDateLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberNumber", DbType="NChar(10)")]
		public string MemberNumber
		{
			get
			{
				return this._MemberNumber;
			}
			set
			{
				if ((this._MemberNumber != value))
				{
					this.OnMemberNumberChanging(value);
					this.SendPropertyChanging();
					this._MemberNumber = value;
					this.SendPropertyChanged("MemberNumber");
					this.OnMemberNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUHoursAccount", DbType="NChar(10)")]
		public string CUHoursAccount
		{
			get
			{
				return this._CUHoursAccount;
			}
			set
			{
				if ((this._CUHoursAccount != value))
				{
					this.OnCUHoursAccountChanging(value);
					this.SendPropertyChanging();
					this._CUHoursAccount = value;
					this.SendPropertyChanged("CUHoursAccount");
					this.OnCUHoursAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUMoneyAccount", DbType="NChar(10)")]
		public string CUMoneyAccount
		{
			get
			{
				return this._CUMoneyAccount;
			}
			set
			{
				if ((this._CUMoneyAccount != value))
				{
					this.OnCUMoneyAccountChanging(value);
					this.SendPropertyChanging();
					this._CUMoneyAccount = value;
					this.SendPropertyChanged("CUMoneyAccount");
					this.OnCUMoneyAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int NOT NULL")]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameId", DbType="Int NOT NULL")]
		public int NameId
		{
			get
			{
				return this._NameId;
			}
			set
			{
				if ((this._NameId != value))
				{
					if (this._Name.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNameIdChanging(value);
					this.SendPropertyChanging();
					this._NameId = value;
					this.SendPropertyChanged("NameId");
					this.OnNameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NINumber", DbType="NChar(14)")]
		public string NINumber
		{
			get
			{
				return this._NINumber;
			}
			set
			{
				if ((this._NINumber != value))
				{
					this.OnNINumberChanging(value);
					this.SendPropertyChanging();
					this._NINumber = value;
					this.SendPropertyChanged("NINumber");
					this.OnNINumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextOfKinId", DbType="Int")]
		public System.Nullable<int> NextOfKinId
		{
			get
			{
				return this._NextOfKinId;
			}
			set
			{
				if ((this._NextOfKinId != value))
				{
					if (this._NextOfKin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNextOfKinIdChanging(value);
					this.SendPropertyChanging();
					this._NextOfKinId = value;
					this.SendPropertyChanged("NextOfKinId");
					this.OnNextOfKinIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalGroupId", DbType="Int")]
		public System.Nullable<int> LocalGroupId
		{
			get
			{
				return this._LocalGroupId;
			}
			set
			{
				if ((this._LocalGroupId != value))
				{
					if (this._LocalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._LocalGroupId = value;
					this.SendPropertyChanged("LocalGroupId");
					this.OnLocalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalDetail_Link_PersonalDetails_Contact", Storage="_Link_PersonalDetails_Contacts", ThisKey="Id", OtherKey="PersonalDetailsId")]
		public EntitySet<Link_PersonalDetails_Contact> Link_PersonalDetails_Contacts
		{
			get
			{
				return this._Link_PersonalDetails_Contacts;
			}
			set
			{
				this._Link_PersonalDetails_Contacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalDetail_Link_PersonalDetails_LocalGroup", Storage="_Link_PersonalDetails_LocalGroups", ThisKey="Id", OtherKey="PersonalDetailsId")]
		public EntitySet<Link_PersonalDetails_LocalGroup> Link_PersonalDetails_LocalGroups
		{
			get
			{
				return this._Link_PersonalDetails_LocalGroups;
			}
			set
			{
				this._Link_PersonalDetails_LocalGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalDetail_Link_PersonalDetails_Reference", Storage="_Link_PersonalDetails_References", ThisKey="Id", OtherKey="PersonalDetailsId")]
		public EntitySet<Link_PersonalDetails_Reference> Link_PersonalDetails_References
		{
			get
			{
				return this._Link_PersonalDetails_References;
			}
			set
			{
				this._Link_PersonalDetails_References.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalDetail_Need", Storage="_Needs", ThisKey="Id", OtherKey="PersonalDetailsId")]
		public EntitySet<Need> Needs
		{
			get
			{
				return this._Needs;
			}
			set
			{
				this._Needs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalDetail_Reference", Storage="_References", ThisKey="Id", OtherKey="PersonalDetailsId")]
		public EntitySet<Reference> References
		{
			get
			{
				return this._References;
			}
			set
			{
				this._References.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_PersonalDetail", Storage="_Address", ThisKey="AddressId", OtherKey="Id", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.PersonalDetails.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.PersonalDetails.Add(this);
						this._AddressId = value.Id;
					}
					else
					{
						this._AddressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Name_PersonalDetail", Storage="_Name", ThisKey="NameId", OtherKey="Id", IsForeignKey=true)]
		public Name Name
		{
			get
			{
				return this._Name.Entity;
			}
			set
			{
				Name previousValue = this._Name.Entity;
				if (((previousValue != value) 
							|| (this._Name.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Name.Entity = null;
						previousValue.PersonalDetails.Remove(this);
					}
					this._Name.Entity = value;
					if ((value != null))
					{
						value.PersonalDetails.Add(this);
						this._NameId = value.Id;
					}
					else
					{
						this._NameId = default(int);
					}
					this.SendPropertyChanged("Name");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocalGroup_PersonalDetail", Storage="_LocalGroup", ThisKey="LocalGroupId", OtherKey="Id", IsForeignKey=true)]
		public LocalGroup LocalGroup
		{
			get
			{
				return this._LocalGroup.Entity;
			}
			set
			{
				LocalGroup previousValue = this._LocalGroup.Entity;
				if (((previousValue != value) 
							|| (this._LocalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LocalGroup.Entity = null;
						previousValue.PersonalDetails.Remove(this);
					}
					this._LocalGroup.Entity = value;
					if ((value != null))
					{
						value.PersonalDetails.Add(this);
						this._LocalGroupId = value.Id;
					}
					else
					{
						this._LocalGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LocalGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NextOfKin_PersonalDetail", Storage="_NextOfKin", ThisKey="NextOfKinId", OtherKey="Id", IsForeignKey=true)]
		public NextOfKin NextOfKin
		{
			get
			{
				return this._NextOfKin.Entity;
			}
			set
			{
				NextOfKin previousValue = this._NextOfKin.Entity;
				if (((previousValue != value) 
							|| (this._NextOfKin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NextOfKin.Entity = null;
						previousValue.PersonalDetails.Remove(this);
					}
					this._NextOfKin.Entity = value;
					if ((value != null))
					{
						value.PersonalDetails.Add(this);
						this._NextOfKinId = value.Id;
					}
					else
					{
						this._NextOfKinId = default(Nullable<int>);
					}
					this.SendPropertyChanged("NextOfKin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Link_PersonalDetails_Contacts(Link_PersonalDetails_Contact entity)
		{
			this.SendPropertyChanging();
			entity.PersonalDetail = this;
		}
		
		private void detach_Link_PersonalDetails_Contacts(Link_PersonalDetails_Contact entity)
		{
			this.SendPropertyChanging();
			entity.PersonalDetail = null;
		}
		
		private void attach_Link_PersonalDetails_LocalGroups(Link_PersonalDetails_LocalGroup entity)
		{
			this.SendPropertyChanging();
			entity.PersonalDetail = this;
		}
		
		private void detach_Link_PersonalDetails_LocalGroups(Link_PersonalDetails_LocalGroup entity)
		{
			this.SendPropertyChanging();
			entity.PersonalDetail = null;
		}
		
		private void attach_Link_PersonalDetails_References(Link_PersonalDetails_Reference entity)
		{
			this.SendPropertyChanging();
			entity.PersonalDetail = this;
		}
		
		private void detach_Link_PersonalDetails_References(Link_PersonalDetails_Reference entity)
		{
			this.SendPropertyChanging();
			entity.PersonalDetail = null;
		}
		
		private void attach_Needs(Need entity)
		{
			this.SendPropertyChanging();
			entity.PersonalDetail = this;
		}
		
		private void detach_Needs(Need entity)
		{
			this.SendPropertyChanging();
			entity.PersonalDetail = null;
		}
		
		private void attach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.PersonalDetail = this;
		}
		
		private void detach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.PersonalDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reference")]
	public partial class Reference : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _NameId;
		
		private int _AddressId;
		
		private string _Occupation;
		
		private int _PersonalDetailsId;
		
		private System.Nullable<System.DateTime> _FollowedUp;
		
		private System.Nullable<System.DateTime> _ConfirmedOK;
		
		private EntitySet<Link_PersonalDetails_Reference> _Link_PersonalDetails_References;
		
		private EntitySet<Link_Reference_Contact> _Link_Reference_Contacts;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Name> _Name;
		
		private EntityRef<PersonalDetail> _PersonalDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameIdChanging(int value);
    partial void OnNameIdChanged();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnOccupationChanging(string value);
    partial void OnOccupationChanged();
    partial void OnPersonalDetailsIdChanging(int value);
    partial void OnPersonalDetailsIdChanged();
    partial void OnFollowedUpChanging(System.Nullable<System.DateTime> value);
    partial void OnFollowedUpChanged();
    partial void OnConfirmedOKChanging(System.Nullable<System.DateTime> value);
    partial void OnConfirmedOKChanged();
    #endregion
		
		public Reference()
		{
			this._Link_PersonalDetails_References = new EntitySet<Link_PersonalDetails_Reference>(new Action<Link_PersonalDetails_Reference>(this.attach_Link_PersonalDetails_References), new Action<Link_PersonalDetails_Reference>(this.detach_Link_PersonalDetails_References));
			this._Link_Reference_Contacts = new EntitySet<Link_Reference_Contact>(new Action<Link_Reference_Contact>(this.attach_Link_Reference_Contacts), new Action<Link_Reference_Contact>(this.detach_Link_Reference_Contacts));
			this._Address = default(EntityRef<Address>);
			this._Name = default(EntityRef<Name>);
			this._PersonalDetail = default(EntityRef<PersonalDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameId", DbType="Int NOT NULL")]
		public int NameId
		{
			get
			{
				return this._NameId;
			}
			set
			{
				if ((this._NameId != value))
				{
					if (this._Name.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNameIdChanging(value);
					this.SendPropertyChanging();
					this._NameId = value;
					this.SendPropertyChanged("NameId");
					this.OnNameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int NOT NULL")]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Occupation", DbType="NVarChar(150)")]
		public string Occupation
		{
			get
			{
				return this._Occupation;
			}
			set
			{
				if ((this._Occupation != value))
				{
					this.OnOccupationChanging(value);
					this.SendPropertyChanging();
					this._Occupation = value;
					this.SendPropertyChanged("Occupation");
					this.OnOccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalDetailsId", DbType="Int NOT NULL")]
		public int PersonalDetailsId
		{
			get
			{
				return this._PersonalDetailsId;
			}
			set
			{
				if ((this._PersonalDetailsId != value))
				{
					if (this._PersonalDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonalDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._PersonalDetailsId = value;
					this.SendPropertyChanged("PersonalDetailsId");
					this.OnPersonalDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FollowedUp", DbType="Date")]
		public System.Nullable<System.DateTime> FollowedUp
		{
			get
			{
				return this._FollowedUp;
			}
			set
			{
				if ((this._FollowedUp != value))
				{
					this.OnFollowedUpChanging(value);
					this.SendPropertyChanging();
					this._FollowedUp = value;
					this.SendPropertyChanged("FollowedUp");
					this.OnFollowedUpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfirmedOK", DbType="Date")]
		public System.Nullable<System.DateTime> ConfirmedOK
		{
			get
			{
				return this._ConfirmedOK;
			}
			set
			{
				if ((this._ConfirmedOK != value))
				{
					this.OnConfirmedOKChanging(value);
					this.SendPropertyChanging();
					this._ConfirmedOK = value;
					this.SendPropertyChanged("ConfirmedOK");
					this.OnConfirmedOKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reference_Link_PersonalDetails_Reference", Storage="_Link_PersonalDetails_References", ThisKey="Id", OtherKey="ReferenceId")]
		public EntitySet<Link_PersonalDetails_Reference> Link_PersonalDetails_References
		{
			get
			{
				return this._Link_PersonalDetails_References;
			}
			set
			{
				this._Link_PersonalDetails_References.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reference_Link_Reference_Contact", Storage="_Link_Reference_Contacts", ThisKey="Id", OtherKey="ReferenceId")]
		public EntitySet<Link_Reference_Contact> Link_Reference_Contacts
		{
			get
			{
				return this._Link_Reference_Contacts;
			}
			set
			{
				this._Link_Reference_Contacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Reference", Storage="_Address", ThisKey="AddressId", OtherKey="Id", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.References.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.References.Add(this);
						this._AddressId = value.Id;
					}
					else
					{
						this._AddressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Name_Reference", Storage="_Name", ThisKey="NameId", OtherKey="Id", IsForeignKey=true)]
		public Name Name
		{
			get
			{
				return this._Name.Entity;
			}
			set
			{
				Name previousValue = this._Name.Entity;
				if (((previousValue != value) 
							|| (this._Name.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Name.Entity = null;
						previousValue.References.Remove(this);
					}
					this._Name.Entity = value;
					if ((value != null))
					{
						value.References.Add(this);
						this._NameId = value.Id;
					}
					else
					{
						this._NameId = default(int);
					}
					this.SendPropertyChanged("Name");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonalDetail_Reference", Storage="_PersonalDetail", ThisKey="PersonalDetailsId", OtherKey="Id", IsForeignKey=true)]
		public PersonalDetail PersonalDetail
		{
			get
			{
				return this._PersonalDetail.Entity;
			}
			set
			{
				PersonalDetail previousValue = this._PersonalDetail.Entity;
				if (((previousValue != value) 
							|| (this._PersonalDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonalDetail.Entity = null;
						previousValue.References.Remove(this);
					}
					this._PersonalDetail.Entity = value;
					if ((value != null))
					{
						value.References.Add(this);
						this._PersonalDetailsId = value.Id;
					}
					else
					{
						this._PersonalDetailsId = default(int);
					}
					this.SendPropertyChanged("PersonalDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Link_PersonalDetails_References(Link_PersonalDetails_Reference entity)
		{
			this.SendPropertyChanging();
			entity.Reference = this;
		}
		
		private void detach_Link_PersonalDetails_References(Link_PersonalDetails_Reference entity)
		{
			this.SendPropertyChanging();
			entity.Reference = null;
		}
		
		private void attach_Link_Reference_Contacts(Link_Reference_Contact entity)
		{
			this.SendPropertyChanging();
			entity.Reference = this;
		}
		
		private void detach_Link_Reference_Contacts(Link_Reference_Contact entity)
		{
			this.SendPropertyChanging();
			entity.Reference = null;
		}
	}
}
#pragma warning restore 1591
